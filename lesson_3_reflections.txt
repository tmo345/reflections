When would you want to use a remote repository rather than keeping all your work local?

A remote repository would be useful for collaborating with others on a
project. Also, it can serve as a backup of your repository.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

One of the big benefits of a distributed version control system is that you
can have a local full clone of a remote repository. This allows you to work on
your repository regardless of whether you are connected to the internet.
Manual pulls make more sense in this context. Also, if you are working
collabortatively on a project, you might not want all of the commits to the
remote repository to constantly update in your local one.


Describe the difference between forks, clones, and branches. When would you
use one instead of another?

    You initially start out with a master branch that consists of a series of
    linear commits in a chronological chain. A branch is made when you split
    off of the master branch to start a new independent series of commits. The
    new branch is still connected to and shares the history of master branch
    prior to the branch point. After the branch point, the commits made to the
    new branch will be separate from those made to the master branch. You use
    a branch when you are working within a repository and would like to for
    example work on a new feature while maintaining the working integrity of
    the master branch.

    A clone is when you create a new copy of a repository whether completely
    locally or copying a repository from GitHub to local. An example of a time
    when you would want to clone would be that you are going to collaborate
    with someone else on their project and you need a copy of the repository
    to start working. In the case of a repository you are working on, you
    might want to clone rather than create a new branch if you are going to
    dramatically take the project in a different direction from where you had
    been going. You are able to work on the cloned repository without
    affecting the original.

    A fork is a clone that GitHub makes for you on its servers. It is the same
    as a clone except that it allows for linking back to and credit to be
    given to the original repository/author. You would use this when you want
    to work on a project or experiment and modify for your own needs despite
    not having permissions to modify the original project.


What is the benefit of having a copy of the last known state of the remote stored locally?

This allows you to have the most up to date version of the remote. If this is a project
you are working on with a team, it allows you to continue to work on your master branch
while staying up to date with the latest commits to the remote. It also means you can make
sure that your changes to your master branch don't conflict with the remote.


How would you collaborate without using Git or GitHub? What would be easier and what would
be harder?

Without Git or GitHub, everything would have to be manually sent, checked for differences,
and merged. This means, I might send a changed project file to a collaborator. They would
have to download it and read through to see how my version differs from theirs. They then
have to make changes to theirs to reflect my changes. It gets even more tedious and error
prone because now I need the most up to date project file, which means the collaborator
now sends back the file they just merged so I can see the changes. This wouldn't be a huge
issue except I may have made more changes to my version of the project file while my
collaborator was merging my earlier changes. Now I have to manually check for differences,
resolve conflicts, and incorporate changes into my file. This seems very inefficient and
error prone. Except for not having to learn a new tool if you're not already familiar with
Git, there does not seem to be anything easier about not using these tools.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

If you are working on a new feature that may break the project as it is now in the master
branch, then making changes in a separate branch, will allow you to preserve the function
of the master branch version while you make the breaking changes in the branch. Once you
are done with the new feature in the branch, you can resolve conflicts in a controlled mannner
to ensure a smooth incorporation of the new feature into the master branch without breaking
anything. The benefit of this approach is that if the master is the production code, you
continue to ensure that it is working properly no matter what experimental features or fixes
you are working on in any branches. The benefit of working on the master directly would be
that you avoid the complexities of merge conflicts and pull requests in GitHub. However, these
complexities would seem to be well worth it in order to get the benefits described above.
